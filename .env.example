######################################################################
# Copy this file to `.env` (or `.env.local` for Next.js) and fill it in.
# Notes below tell you exactly where to find or generate each value.
######################################################################

# --- Database (Supabase Postgres) ---
# Required: Primary DB connection used by the app.
# Use the POOLED/TRANSACTION connection (pgBouncer, port 6543) in production.
# Where to find: Supabase → Project Settings → Database → Connection pooling → URI
# Example (do not commit real secrets):
#   postgresql://postgres:<PASSWORD>@aws-0-xyz.pooler.supabase.com:6543/postgres
DATABASE_URL=

# Optional: Direct/non-pooled connection for migrations (Drizzle) using port 5432.
# Where to find: Supabase → Project Settings → Database → Connection string → URI
# Example:
#   postgresql://postgres:<PASSWORD>@db.xyz.supabase.co:5432/postgres
DIRECT_URL=

# --- NextAuth ---
# Required: Secret for signing/encrypting NextAuth JWTs and sessions.
# How to generate:
#   - OpenSSL:  openssl rand -base64 32
#   - Node.js:  node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#   - Vercel:   Add env var → Generate
NEXTAUTH_SECRET=

# Optional (recommended in production): Public site URL for NextAuth callbacks.
# Dev example: http://localhost:3000
# Prod example: https://your-domain.com
NEXTAUTH_URL=

# --- Supabase ---
# Required: Project URL.
# Where to find: Supabase → Project Settings → API → Project URL
# Example: https://xyzcompany.supabase.co
SUPABASE_URL=

# Required: Service Role key (server-side only; highly sensitive!).
# Where to find: Supabase → Project Settings → API → Service Role Key
# Never expose to client or commit to git.
SUPABASE_SERVICE_ROLE_KEY=

# Optional: Storage bucket name used for uploads. Defaults to "uploads" if omitted.
# Create/verify in: Supabase → Storage → Buckets → Create bucket
SUPABASE_BUCKET=uploads

# --- Revalidation Webhook ---
# Required: Shared secret for POST /api/revalidate to trigger cache revalidation.
# Use a strong random string (you can reuse NEXTAUTH_SECRET or generate another one).
# Example trigger:
#   curl -X POST "$NEXTAUTH_URL/api/revalidate" \
#     -H "Content-Type: application/json" \
#     -d '{"secret":"<THIS_VALUE>","paths":["/","/blog"],"tags":["blog:list"]}'
REVALIDATE_SECRET=

# --- Initial Owner Seeding (optional) ---
# If both are set, `pnpm db:seed` will create an owner user.
# Email for the owner user to seed.
OWNER_EMAIL=
# Bcrypt hash for the owner's password.
# How to generate (Node with bcrypt):
#   pnpm add -D bcrypt
#   node -e "require('bcrypt').hash(process.argv[1], 12).then(console.log)" 'yourPassword'
OWNER_PASSWORD_HASH=

# --- Client-exposed (optional) ---
# Exposed to the browser; used for image host allowlist, etc.
# Usually set equal to SUPABASE_URL.
NEXT_PUBLIC_SUPABASE_URL=

# Public/base site URL used for canonical/OG tags in blog pages.
# Dev: http://localhost:3000   Prod: https://your-domain.com
NEXT_PUBLIC_SITE_URL=
